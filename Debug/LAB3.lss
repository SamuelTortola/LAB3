
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  000001b6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800192  00800192  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e5  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073c  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 39       	cpi	r26, 0x95	; 149
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  9e:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
volatile char receivedChar = 0;    //Variable que almacena el valor del UART


void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  a6:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
  ac:	84 b9       	out	0x04, r24	; 4
	DDRC =0;  //Puerto C como entrada
  ae:	17 b8       	out	0x07, r1	; 7
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
  b0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	
	
	//initADC(); //Iniciar ADC
	
	initUART9600();  //Iniciar UART
  b4:	0e 94 a6 00 	call	0x14c	; 0x14c <initUART9600>
	
	sei(); //Activar interrupciones
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <main>:
}


int main(void)
{
	setup();
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
	while (1)
	{
		
		if(activa == 0){
  c0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <activa>
  c4:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <activa+0x1>
  c8:	89 2b       	or	r24, r25
  ca:	d1 f7       	brne	.-12     	; 0xc0 <main+0x4>
			writeTextUART("\n\r     **************Hola como esta****************");   //Mostrar inicio
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 c1 00 	call	0x182	; 0x182 <writeTextUART>
			writeUART(10);
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			writeUART(13);
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			writeUART(10);
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			writeTextUART("          Coloque 1 para leer potenciometros");   //Mostrar inicio
  e6:	84 e3       	ldi	r24, 0x34	; 52
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 c1 00 	call	0x182	; 0x182 <writeTextUART>
			writeUART(10);
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			writeUART(13);
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			writeTextUART("          Coloque 2 para incrementar contador\n\r");   //Mostrar inicio
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 c1 00 	call	0x182	; 0x182 <writeTextUART>
			writeUART(10);
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			writeUART(13);
 108:	8d e0       	ldi	r24, 0x0D	; 13
 10a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <writeUART>
			activa = 1;   //Salir del menu
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <activa+0x1>
 116:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <activa>
 11a:	d2 cf       	rjmp	.-92     	; 0xc0 <main+0x4>

0000011c <__vector_18>:




ISR(USART_RX_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 128:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 130:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 134:	85 ff       	sbrs	r24, 5
 136:	fc cf       	rjmp	.-8      	; 0x130 <__vector_18+0x14>
	UDR0 = receivedChar;
 138:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <initUART9600>:
#include "UART.h"

void initUART9600()
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	82 60       	ori	r24, 0x02	; 2
 156:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 158:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 15c:	e1 ec       	ldi	r30, 0xC1	; 193
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 162:	80 81       	ld	r24, Z
 164:	88 69       	ori	r24, 0x98	; 152
 166:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 168:	e2 ec       	ldi	r30, 0xC2	; 194
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 16e:	80 81       	ld	r24, Z
 170:	86 60       	ori	r24, 0x06	; 6
 172:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 174:	87 e6       	ldi	r24, 0x67	; 103
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 17c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 180:	08 95       	ret

00000182 <writeTextUART>:
	
}


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 182:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	07 c0       	rjmp	.+14     	; 0x196 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 188:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18c:	95 ff       	sbrs	r25, 5
 18e:	fc cf       	rjmp	.-8      	; 0x188 <writeTextUART+0x6>
		UDR0 = Texto[o];
 190:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	fa 01       	movw	r30, r20
 198:	e2 0f       	add	r30, r18
 19a:	f1 1d       	adc	r31, r1
 19c:	30 81       	ld	r19, Z
 19e:	31 11       	cpse	r19, r1
 1a0:	f3 cf       	rjmp	.-26     	; 0x188 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 1a2:	08 95       	ret

000001a4 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 1a4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <writeUART>
	UDR0 = Caracter;
 1ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
