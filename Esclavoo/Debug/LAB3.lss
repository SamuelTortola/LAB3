
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000790  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a9  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
  96:	ae e7       	ldi	r26, 0x7E	; 126
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
  a0:	8c 91       	ld	r24, X
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8c 93       	st	X, r24
  a6:	80 81       	ld	r24, Z
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	80 83       	st	Z, r24
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <setup>:



void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  d0:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
  d6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;  //Puerto C como entrada
  d8:	17 b8       	out	0x07, r1	; 7
	
	
	initADC(); //Iniciar ADC
  da:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	sei(); //Activar interrupciones
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <main>:
}


int main(void)
{
	setup();
  e2:	0e 94 68 00 	call	0xd0	; 0xd0 <setup>
	
	while (1)
	{
		
		ADCSRA |=(1<<ADSC);  //Leer ADC
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <main+0x4>

000000f2 <__vector_21>:
	
}



ISR(ADC_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	
	switch (caso){
 102:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <caso>
 106:	88 23       	and	r24, r24
 108:	19 f0       	breq	.+6      	; 0x110 <__vector_21+0x1e>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	71 f0       	breq	.+28     	; 0x12a <__vector_21+0x38>
 10e:	1b c0       	rjmp	.+54     	; 0x146 <__vector_21+0x54>
		case 0:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)); //Borrar configuracion actual y poner ADC1
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	80 83       	st	Z, r24
		Val1 = ADCH;
 11a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Val1>
		caso = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <caso>
		break;
 128:	0e c0       	rjmp	.+28     	; 0x146 <__vector_21+0x54>
		
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC0
 12a:	ec e7       	ldi	r30, 0x7C	; 124
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
		Val2 = ADCH;
 13a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		caso = 0;
 142:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <caso>
		break;
	}
	
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	80 83       	st	Z, r24
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
