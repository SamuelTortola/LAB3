
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000912  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b9  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e0  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 00 	call	0xea	; 0xea <main>
  88:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
  96:	ae e7       	ldi	r26, 0x7E	; 126
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
  a0:	8c 91       	ld	r24, X
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8c 93       	st	X, r24
  a6:	80 81       	ld	r24, Z
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	80 83       	st	Z, r24
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <setup>:



void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  d0:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0;  //Puerto C como entrada
  d6:	17 b8       	out	0x07, r1	; 7
	
	
	initADC(); //Iniciar ADC
  d8:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	SPI_init();
  dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_init>
	SPCR |= (1<<SPIE); //Activar interrupcion SPI
  e0:	8c b5       	in	r24, 0x2c	; 44
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c bd       	out	0x2c, r24	; 44
		
	sei(); //Activar interrupciones
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <main>:
}


int main(void)
{
	setup();
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <setup>
	{
		
		
		
		
		ADCSRA |=(1<<ADSC);  //Leer ADC
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	9c e9       	ldi	r25, 0x9C	; 156
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x12>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x18>
 102:	00 00       	nop
 104:	f4 cf       	rjmp	.-24     	; 0xee <main+0x4>

00000106 <__vector_21>:
	}
}



ISR(ADC_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	
	switch (caso){
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <caso>
 11a:	88 23       	and	r24, r24
 11c:	19 f0       	breq	.+6      	; 0x124 <__vector_21+0x1e>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	71 f0       	breq	.+28     	; 0x13e <__vector_21+0x38>
 122:	1b c0       	rjmp	.+54     	; 0x15a <__vector_21+0x54>
		case 0:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)); //Borrar configuracion actual y poner ADC1
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	80 83       	st	Z, r24
		Val1 = ADCH;
 12e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Val1>
		caso = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <caso>
		break;
 13c:	0e c0       	rjmp	.+28     	; 0x15a <__vector_21+0x54>
		
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC0
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
		Val2 = ADCH;
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		caso = 0;
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <caso>
		break;
	}
	
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 83       	st	Z, r24
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_17>:


ISR(SPI_STC_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	uint8_t SPIVALOR = SPDR;
 196:	8e b5       	in	r24, 0x2e	; 46
	
	if (SPIVALOR == 1)  //Si el maestro quiere ver el valor de los potenciometros
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	21 f4       	brne	.+8      	; 0x1a4 <__vector_17+0x30>
	{
		SPI_tx(Val1);
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Val1>
 1a0:	0e 94 02 01 	call	0x204	; 0x204 <SPI_tx>
	}
	
	
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <SPI_init>:
	/*	Pines de control para esclavos
		PB2: Esclavo 1
	*/
	
	
	DDRB |= (1<<DDB4);  //MISO COMO SALIDA
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1<<DDB2) | (1<<DDB3) | (1<<DDB5));   //SS, MOSI, and SCK OUTPUT in master mode
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	83 7d       	andi	r24, 0xD3	; 211
 1d0:	84 b9       	out	0x04, r24	; 4

	/*	Orden de salida de los datos 
		DORD = 0, El bit más significativo (MSB) es enviado primero
		DORD = 1, El bit menos significativo (LSB) es enviado primero
	*/
	SPCR &=~ (1<<DORD);
 1d2:	8c b5       	in	r24, 0x2c	; 44
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	8c bd       	out	0x2c, r24	; 44
		  0	  |   0    |  Clock inactivo en bajo, detección de bits en flanco de subida
		  0	  |   1    |  Clock inactivo en bajo, detección de bits en flanco de bajada
		  1	  |   0    |  Clock inactivo en alto, detección de bits en flanco de bajada
		  1	  |   1    |  Clock inactivo en alto, detección de bits en flanco de subida			
	*/
	SPCR &=~ (1<<CPOL);
 1d8:	8c b5       	in	r24, 0x2c	; 44
 1da:	87 7f       	andi	r24, 0xF7	; 247
 1dc:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<CPHA);
 1de:	8c b5       	in	r24, 0x2c	; 44
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8c bd       	out	0x2c, r24	; 44
		1	  | 1	 |	0	|	32
		1	  | 1	 |	1	|	64
		
		F_CPU=16MHz -> F_SPI= F_CPU/16= 1MHz		 
	*/
	SPCR |=  (1<<SPR0);
 1e4:	8c b5       	in	r24, 0x2c	; 44
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
 1ea:	8c b5       	in	r24, 0x2c	; 44
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	8c bd       	out	0x2c, r24	; 44
	SPSR &=~ (1<<SPI2X);
 1f0:	8d b5       	in	r24, 0x2d	; 45
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8d bd       	out	0x2d, r24	; 45

	/*	Modo de funcionamiento 
		MSTR = 0, SPI como esclavo
		MSTR = 1; SPI como maestro
	*/
	SPCR &= ~(1<<MSTR);
 1f6:	8c b5       	in	r24, 0x2c	; 44
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	8c bd       	out	0x2c, r24	; 44

	/* Activar SPI 
		SPE = 0, SPI desactivado
		SPE = |, SPI activado
	*/
	SPCR |= (1<<SPE);
 1fc:	8c b5       	in	r24, 0x2c	; 44
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	8c bd       	out	0x2c, r24	; 44
 202:	08 95       	ret

00000204 <SPI_tx>:


void SPI_tx(uint8_t data)
{
	/* Cargar dato al registro */
	SPDR = data;
 204:	8e bd       	out	0x2e, r24	; 46
	/* Esperar a que la transmisión se realice */
	while(!(SPSR & (1<<SPIF)));
 206:	0d b4       	in	r0, 0x2d	; 45
 208:	07 fe       	sbrs	r0, 7
 20a:	fd cf       	rjmp	.-6      	; 0x206 <SPI_tx+0x2>
}
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
