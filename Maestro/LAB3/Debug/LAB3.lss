
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800194  00800194  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab6  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007db  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054c  00000000  00000000  0000170d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  0000219d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 39       	cpi	r26, 0x94	; 148
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e9       	ldi	r26, 0x94	; 148
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 39       	cpi	r26, 0x97	; 151
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 00 	call	0xba	; 0xba <main>
  9e:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
uint8_t activa = 0;
volatile char receivedChar = 0;    //Variable que almacena el valor del UART

void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  a6:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0;  //Puerto C como entrada
  ac:	17 b8       	out	0x07, r1	; 7
	
	initUART9600();  //Iniciar UART
  ae:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <initUART9600>
	SPI_init();
  b2:	0e 94 b7 00 	call	0x16e	; 0x16e <SPI_init>
	

	
	sei(); //Activar interrupciones
  b6:	78 94       	sei
  b8:	08 95       	ret

000000ba <main>:



int main(void)
{
   setup();
  ba:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
   
    while (1) 
    {
		
		if(activa == 0){
  be:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <activa>
  c2:	81 11       	cpse	r24, r1
  c4:	24 c0       	rjmp	.+72     	; 0x10e <main+0x54>
			writeTextUART("\n\r     **************Hola como esta****************");   //Mostrar inicio
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 07 01 	call	0x20e	; 0x20e <writeTextUART>
			writeUART(10);
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			writeUART(13);
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			writeUART(10);
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			writeTextUART("          Coloque 1 para leer potenciometros");   //Mostrar inicio
  e0:	84 e3       	ldi	r24, 0x34	; 52
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 07 01 	call	0x20e	; 0x20e <writeTextUART>
			writeUART(10);
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			writeUART(13);
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			writeTextUART("          Coloque 2 para incrementar contador\n\r");   //Mostrar inicio
  f4:	81 e6       	ldi	r24, 0x61	; 97
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 07 01 	call	0x20e	; 0x20e <writeTextUART>
			writeUART(10);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			writeUART(13);
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	0e 94 18 01 	call	0x230	; 0x230 <writeUART>
			activa = 1;   //Salir del menu
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <activa>
		}
		
		if(receivedChar != 0){      //Si la variable que hay en USART es diferente de cero
 10e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
 112:	88 23       	and	r24, r24
 114:	a1 f2       	breq	.-88     	; 0xbe <main+0x4>
			SPI_slaveON(2);
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 d6 00 	call	0x1ac	; 0x1ac <SPI_slaveON>
			SPI_tx(4);
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_tx>
			datoRecibido = SPI_rx();
 122:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SPI_rx>
 126:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <datoRecibido>
			SPI_slaveOFF(2);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SPI_slaveOFF>
			
			if (datoRecibido == 4)
 130:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <datoRecibido>
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	21 f4       	brne	.+8      	; 0x140 <main+0x86>
			{
				writeTextUART("47");
 138:	81 e9       	ldi	r24, 0x91	; 145
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 07 01 	call	0x20e	; 0x20e <writeTextUART>
			}
			//writeTextUART("888");
			
			receivedChar = 0;
 140:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
 144:	bc cf       	rjmp	.-136    	; 0xbe <main+0x4>

00000146 <__vector_18>:
}
}


ISR(USART_RX_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 152:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 156:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 15a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15e:	85 ff       	sbrs	r24, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <__vector_18+0x14>
	
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <SPI_init>:
	/*	Pines de control para esclavos
		PB2: Esclavo 1
	*/
	
	
	DDRB |= (1<<DDB2) | (1<<DDB3) | (1<<DDB5);   //SS, MOSI, and SCK OUTPUT in master mode
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	8c 62       	ori	r24, 0x2C	; 44
 172:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB4);  //MISO como entrada
 174:	84 b1       	in	r24, 0x04	; 4
 176:	8f 7e       	andi	r24, 0xEF	; 239
 178:	84 b9       	out	0x04, r24	; 4

	/*	Orden de salida de los datos 
		DORD = 0, El bit más significativo (MSB) es enviado primero
		DORD = 1, El bit menos significativo (LSB) es enviado primero
	*/
	SPCR &=~ (1<<DORD);
 17a:	8c b5       	in	r24, 0x2c	; 44
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	8c bd       	out	0x2c, r24	; 44
		  0	  |   0    |  Clock inactivo en bajo, detección de bits en flanco de subida
		  0	  |   1    |  Clock inactivo en bajo, detección de bits en flanco de bajada
		  1	  |   0    |  Clock inactivo en alto, detección de bits en flanco de bajada
		  1	  |   1    |  Clock inactivo en alto, detección de bits en flanco de subida			
	*/
	SPCR &=~ (1<<CPOL);
 180:	8c b5       	in	r24, 0x2c	; 44
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<CPHA);
 186:	8c b5       	in	r24, 0x2c	; 44
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	8c bd       	out	0x2c, r24	; 44
		1	  | 1	 |	0	|	32
		1	  | 1	 |	1	|	64
		
		F_CPU=16MHz -> F_SPI= F_CPU/16= 1MHz		 
	*/
	SPCR |=  (1<<SPR0);
 18c:	8c b5       	in	r24, 0x2c	; 44
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
 192:	8c b5       	in	r24, 0x2c	; 44
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	8c bd       	out	0x2c, r24	; 44
	SPSR &=~ (1<<SPI2X);
 198:	8d b5       	in	r24, 0x2d	; 45
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	8d bd       	out	0x2d, r24	; 45

	/*	Modo de funcionamiento 
		MSTR = 0, SPI como esclavo
		MSTR = 1; SPI como maestro
	*/
	SPCR |= (1<<MSTR);
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	8c bd       	out	0x2c, r24	; 44

	/* Activar SPI 
		SPE = 0, SPI desactivado
		SPE = |, SPI activado
	*/
	SPCR |= (1<<SPE);
 1a4:	8c b5       	in	r24, 0x2c	; 44
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	8c bd       	out	0x2c, r24	; 44
 1aa:	08 95       	ret

000001ac <SPI_slaveON>:
}

void SPI_slaveON(uint8_t slave)
{
	switch (slave)
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <SPI_slaveON+0xa>
	{
		case 1:
		//	PORTB &=~ (1<<PORTB1);  //Ejemplo por si se tiene otro o mas esclavos
		break;
		case 2:
			PORTB &=~ (1<<PORTB2);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	08 95       	ret

000001b8 <SPI_slaveOFF>:
	}
}

void SPI_slaveOFF(uint8_t slave)
{
	switch (slave)
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <SPI_slaveOFF+0xa>
	{
		case 1:
			//PORTB |= (1<<PORTB1);
		break;
		case 2:
			PORTB |= (1<<PORTB2);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	08 95       	ret

000001c4 <SPI_tx>:
}

void SPI_tx(uint8_t data)
{
	/* Cargar dato al registro */
	SPDR = data;
 1c4:	8e bd       	out	0x2e, r24	; 46
	/* Esperar a que la transmisión se realice */
	while(!(SPSR & (1<<SPIF)));
 1c6:	0d b4       	in	r0, 0x2d	; 45
 1c8:	07 fe       	sbrs	r0, 7
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <SPI_tx+0x2>
}
 1cc:	08 95       	ret

000001ce <SPI_rx>:

uint8_t SPI_rx()
{
	/* Esperar a la recepción del dato */
	while(!(SPSR & (1<<SPIF)));
 1ce:	0d b4       	in	r0, 0x2d	; 45
 1d0:	07 fe       	sbrs	r0, 7
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <SPI_rx>
	/* Retorna el dato recibido */
	return SPDR;
 1d4:	8e b5       	in	r24, 0x2e	; 46
}
 1d6:	08 95       	ret

000001d8 <initUART9600>:
#include "UART.h"

void initUART9600()
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 1d8:	8a b1       	in	r24, 0x0a	; 10
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 1e4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 1ee:	80 81       	ld	r24, Z
 1f0:	88 69       	ori	r24, 0x98	; 152
 1f2:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 1f4:	e2 ec       	ldi	r30, 0xC2	; 194
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1fa:	80 81       	ld	r24, Z
 1fc:	86 60       	ori	r24, 0x06	; 6
 1fe:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 200:	87 e6       	ldi	r24, 0x67	; 103
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 208:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 20c:	08 95       	ret

0000020e <writeTextUART>:
	
}


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 20e:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	07 c0       	rjmp	.+14     	; 0x222 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 214:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 218:	95 ff       	sbrs	r25, 5
 21a:	fc cf       	rjmp	.-8      	; 0x214 <writeTextUART+0x6>
		UDR0 = Texto[o];
 21c:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 220:	2f 5f       	subi	r18, 0xFF	; 255
 222:	fa 01       	movw	r30, r20
 224:	e2 0f       	add	r30, r18
 226:	f1 1d       	adc	r31, r1
 228:	30 81       	ld	r19, Z
 22a:	31 11       	cpse	r19, r1
 22c:	f3 cf       	rjmp	.-26     	; 0x214 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 22e:	08 95       	ret

00000230 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 230:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 234:	95 ff       	sbrs	r25, 5
 236:	fc cf       	rjmp	.-8      	; 0x230 <writeUART>
	UDR0 = Caracter;
 238:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
