
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  000001ac  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800192  00800192  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e5  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073c  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c4  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  9e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
uint8_t activa = 0;
volatile char receivedChar = 0;    //Variable que almacena el valor del UART

void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  a6:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
  ac:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;  //Puerto C como entrada
  ae:	17 b8       	out	0x07, r1	; 7
	
	initUART9600();
  b0:	0e 94 a1 00 	call	0x142	; 0x142 <initUART9600>
	

	
	sei(); //Activar interrupciones
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <main>:



int main(void)
{
   setup();
  b8:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
   
    while (1) 
    {
		
		if(activa == 0){
  bc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <activa>
  c0:	81 11       	cpse	r24, r1
  c2:	24 c0       	rjmp	.+72     	; 0x10c <main+0x54>
			writeTextUART("\n\r     **************Hola como esta****************");   //Mostrar inicio
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 bc 00 	call	0x178	; 0x178 <writeTextUART>
			writeUART(10);
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			writeUART(13);
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			writeUART(10);
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			writeTextUART("          Coloque 1 para leer potenciometros");   //Mostrar inicio
  de:	84 e3       	ldi	r24, 0x34	; 52
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 bc 00 	call	0x178	; 0x178 <writeTextUART>
			writeUART(10);
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			writeUART(13);
  ec:	8d e0       	ldi	r24, 0x0D	; 13
  ee:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			writeTextUART("          Coloque 2 para incrementar contador\n\r");   //Mostrar inicio
  f2:	81 e6       	ldi	r24, 0x61	; 97
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 bc 00 	call	0x178	; 0x178 <writeTextUART>
			writeUART(10);
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			writeUART(13);
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	0e 94 cd 00 	call	0x19a	; 0x19a <writeUART>
			activa = 1;   //Salir del menu
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <activa>
		}
		
		if(receivedChar != 0){      //Si la variable que hay en USART es diferente de cero
 10c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    }
	
	
	
	
}
 110:	d5 cf       	rjmp	.-86     	; 0xbc <main+0x4>

00000112 <__vector_18>:
}


ISR(USART_RX_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 11e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 122:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 126:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12a:	85 ff       	sbrs	r24, 5
 12c:	fc cf       	rjmp	.-8      	; 0x126 <__vector_18+0x14>
	UDR0  = receivedChar;
 12e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <initUART9600>:
#include "UART.h"

void initUART9600()
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 14e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 152:	e1 ec       	ldi	r30, 0xC1	; 193
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 158:	80 81       	ld	r24, Z
 15a:	88 69       	ori	r24, 0x98	; 152
 15c:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 15e:	e2 ec       	ldi	r30, 0xC2	; 194
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 164:	80 81       	ld	r24, Z
 166:	86 60       	ori	r24, 0x06	; 6
 168:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 16a:	87 e6       	ldi	r24, 0x67	; 103
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 176:	08 95       	ret

00000178 <writeTextUART>:
	
}


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 178:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	07 c0       	rjmp	.+14     	; 0x18c <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 17e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 182:	95 ff       	sbrs	r25, 5
 184:	fc cf       	rjmp	.-8      	; 0x17e <writeTextUART+0x6>
		UDR0 = Texto[o];
 186:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	fa 01       	movw	r30, r20
 18e:	e2 0f       	add	r30, r18
 190:	f1 1d       	adc	r31, r1
 192:	30 81       	ld	r19, Z
 194:	31 11       	cpse	r19, r1
 196:	f3 cf       	rjmp	.-26     	; 0x17e <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 198:	08 95       	ret

0000019a <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <writeUART>
	UDR0 = Caracter;
 1a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
